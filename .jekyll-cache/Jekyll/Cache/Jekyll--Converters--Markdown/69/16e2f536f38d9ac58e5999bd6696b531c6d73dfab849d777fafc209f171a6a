I"(<p><br /></p>

<h1 id="1-자바스크립트-실행-환경">1. 자바스크립트 실행 환경</h1>
<hr />
<p>모든 브라우저는 자바스크립트를 내장하고 있고, Node.js도 자바스크립트 엔진을 내장하고 있다.<br />
하지만 브라우저와 Node.js의 자바스크립트에는 조금 차이가 있다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">브라우저</th>
      <th style="text-align: center"> </th>
      <th>Node.js</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">렌더링이 주된 목적</td>
      <td style="text-align: center"> </td>
      <td>브라우저 이외의 환경에서 자바스크립트 사용 가능</td>
    </tr>
    <tr>
      <td style="text-align: center">DOM API 제공</td>
      <td style="text-align: center"> </td>
      <td>DOM API 제공하지 않음</td>
    </tr>
  </tbody>
</table>

<p><strong>→ 브렌던 아이크가 개발한 <u>자바스크립트</u></strong></p>

<p><br />
<br /></p>

<h1 id="2-자바스크립트의-표준화">2. 자바스크립트의 표준화</h1>
<hr />
<p><code class="language-plaintext highlighter-rouge">자바스크립트의 파생버전이 출시 (Jscript)</code> → <code class="language-plaintext highlighter-rouge">이로인해 브라우저들 사이에서 *크로스 브라우징 이슈 발생</code> → <code class="language-plaintext highlighter-rouge">표준화된 자바스크립트의 필요성이 생김</code></p>

<p class="notice--info"><strong>* 크로스 브라우징</strong><br />
브라우저에 따라 호환성이 다르기 때문에 웹페이지의 기능들이 정상적으로 동작하지 않음!</p>
<ul>
  <li>1997년 7월 표준화된 자바스크립트 사양인 ECMAScript 1(ES1)이 완성</li>  
  <li>이후 ES2, ES3 ... 2020년 ES11로 크고 작은 기능들이 추가되어 발표됨</li>
  <li>범용 프로그래밍 언어로써 필요한 여러 기능들이 도입된 2015년 <u>ECMAScript(ES6)</u> </li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">버전</th>
      <th style="text-align: center">년도</th>
      <th style="text-align: center">특징</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">ES6</td>
      <td style="text-align: center">2015</td>
      <td style="text-align: center">let/const, 클래스, 화살표 함수, 템플릿 리터럴, 디스트럭처링 할당, 스프레드 문법, rest 파라미터, 심벌, 프로미스, Map/Set, 이터러블, for…of, 제너레이터, Proxy, 모듈 import.export</td>
    </tr>
  </tbody>
</table>

<p><br />
<br /></p>

<h1 id="3-자바스크립트-성장과-역사">3. 자바스크립트 성장과 역사</h1>
<hr />

<ol>
  <li>Ajax
    <ul>
      <li>1999년 자바스크립트를 이용해 서버와 브라우저가 비동기 방식으로 데이터를 주고 받을 수 있는 통신 기능</li>
      <li>기존의 웹페이지는 화면이 전환되면 전체 HTML을 받아 다시 랜더링</li>
      <li>Ajax등장 이후 변경할 필요가 없는 부분은 두고 필요한 데이터만 받아 해당 부분 랜더링 → 리소스 절약, 빠른 성능과 부드러운 화면전환이 가능
<br />
<br /></li>
    </ul>
  </li>
  <li>jQuery
    <ul>
      <li>DOM을 더욱 쉽게 제어할 수 있음</li>
      <li>크로스 브라우징 이슈도 어느 정도 해결
<br />
<br /></li>
    </ul>
  </li>
  <li>V8 자바스크립트 엔진
    <blockquote>
      <p>V8은 웹 브라우저 내부에서 자바스크립트 수행 속도의 개선을 목표로 처음 고안되었습니다. 속도 향상을 위해 V8은 인터프리터를 사용하는 대신 자바스크립트 코드를 더 효율적인 머신 코드로 번역합니다. 저스트인타임 컴파일러를 구현함으로써 코드를 실행 시에 자바스크립트 코드를 머신 코드로 컴파일하는데, 이는 스파이더몽키나 리노와 같은 현대적인 다른 자바스크립트 엔진에서도 마찬가지입니다. 주된 차이는 V8은 바이트코드와 같은 중간 코드를 생산하지 않는다는 점입니다.
<br />
<br /></p>
    </blockquote>
  </li>
  <li>Node.js
    <ul>
      <li>브라우저 이외에도 자바스크립트를 작동시킬 수 있도록함</li>
      <li>비동기I/O 지원, 단일스레드 이벤트 루프 기반(요청 처리 성능이 좋음)</li>
      <li>백엔드까지도 다룰 수 있음
<br />
<br /></li>
    </ul>
  </li>
  <li>SPA 프레임워크
    <ul>
      <li>Single Page Application(SAP)</li>
      <li>Angular, React, Vue.js, Svelte …
        <blockquote>
          <p>SPA 구현을 쉽게 말하면 jsp파일 없이 index.html파일 하나에서 js, css등 리소스 파일들과 모듈들을 로드해서 페이지 이동 없이 특정영역만 새로 모듈을 호출하고 데이터를 바인딩하는 개념.</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ol>

<p><br />
<br /></p>

<h1 id="4-자바스크립트와-ecmascript">4. 자바스크립트와 ECMAScript</h1>
<hr />

<p>자바스크립트는 ECMAScript와 브라우저가 별도 지원하는 클라이언트 사이드 <strong>Web API</strong>(DOM, BOM, Canvas, XNLHttpRequest, fetch 등)을 아우르는 개념 (자바스크립트 &gt; ECMAScript)</p>

<p><br />
<br /></p>

<h1 id="5-자바스크립트의-특징">5. 자바스크립트의 특징</h1>
<hr />

<ul>
  <li>웹 브라우저에서 동작하는 유일한 프로그래밍 언어</li>
  <li>별도의 컴파일을 하지 않는 *<u>인터프리터 언어</u></li>
</ul>

<p class="notice--info"><strong>*인터프리터 언어</strong><br />
코드가 실행되는 단계인 런타임에 문 단위로 <u>한줄씩</u> 중간 코드인 바이트 코드로 변환한 후 실행</p>

<ul>
  <li>멀티 패러다임 프로그래밍 언어(명령형, 함수형, 프로토타입 기반, 객체지향 프로그래밍)</li>
  <li>자바스크립트는 <strong><u>프로토타입 기반의 객체지행 언어</u></strong></li>
</ul>

<p><br />
<br /></p>

<h1 id="6-es6-브라우저-지원-현황">6. ES6 브라우저 지원 현황</h1>
<hr />
<p><img src="https://perfectacle.github.io/images/Babel-ES6-with-IE8/es6-compatibility.png" alt="image" /></p>

<p class="notice--info">해당 링크에서 자세히 볼 수 있다.<br />
<a href="https://kangax.github.io/compat-table/es6/">https://kangax.github.io/compat-table/es6/</a></p>

<p>몇몇 브라우저에서 자바스크립트의 최신기능을 지원하지 않을 수도 있기 때문에 *<strong>바벨(Babel)</strong>을 이용할 필요가 있다</p>

<p class="notice--info">*<strong>바벨(Babel)</strong><br />
ES6+ 버전의 자바스크립트나 타입스크립트, JSX 등 다른 언어로 분류되는 언어들에 대해서도 모든 브라우저에서 동작할 수 있도록 호환성을 지켜준다. 바벨은 이렇게 추상화 수준을 유지한 채로 코드를 변화시키는 트랜스파일러의 역할을 한다.</p>

<p><br />
<br /></p>

<p class="notice--info">혹시나 보시다가 고칠 부분이나 마음에 안드시는 부분이 있다면 말씀해주시면 감사하겠습니다!</p>

:ET