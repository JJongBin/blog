I"C<p><br /></p>

<h1 id="1-변수">1. 변수</h1>
<hr />

<p>컴퓨터는 CPU를 통해 연산하고 메모리를 사용해 데이터를 기억한다.</p>

<p class="notice--info"><strong>* 메모리</strong><br />
- 데이터를 저장할 수 있는 데이터 셀의 집합.<br />
- 메모리 셀 하나의 크기는 1바이트(8비트).<br />
- 1바이트 단위로 저장하고 읽음.<br />
- 각 셀은 고유한 메모리 주소를 가진다.
- 저장되는 모든 값은 이진수로 저장된다.</p>

<p>메모리 주소를 통해 값에 접근하는 것은 치명적일 수 있다. 따라서 자바스크립트는 <u>직접적인 메모리 제어를 허용하지 않음</u>.</p>

<p>프로그래밍 언어는 기억할 값을 메모리에 저장하고, 저장된 값을 읽고 재사용하기 위해 <strong><u>변수</u></strong>라는 것을 사용함.</p>

<p class="notice--info"><strong>* 변수의 정의</strong><br />
하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.</p>

<p><strong><u>→ 변수란 값의 위치를 가르킴</u></strong></p>

<p><img src="https://junwoo45.github.io/static/c095036b225ed4f6ebc1ca31f1be2c91/87200/memory1.jpg" alt="image" /></p>

<table>
  <tbody>
    <tr>
      <td>변수이름</td>
      <td>메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름</td>
    </tr>
    <tr>
      <td>변수 값</td>
      <td>변수에 저장된 값</td>
    </tr>
    <tr>
      <td>변수 할당</td>
      <td>변수에 값을 저장하는 것</td>
    </tr>
    <tr>
      <td>변수 참조</td>
      <td>변수에 저장된 값을 읽어들이는 것</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h1 id="2-식별자">2. 식별자</h1>
<hr />
<p>변수의 이름은 식별자라고 부르기도 함.</p>

<p class="notice--info"><strong>* 식별자</strong><br />
어떤 값을 구별해서 식별할 수 있는 고유한 이름.<br />
식별자는 값을 저장하는 것이 아니라 메모리 주소를 기억하고 있다.</p>
<p><br /></p>

<h1 id="3-변수-선언">3. 변수 선언</h1>
<hr />

<p>값을 저장하기 위한 메모리 공간을 확보 → 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있도록 함.</p>

<p><u>자바스크립트에서는 변수를 선언할 때 `var`, `let`, `const` 를 사용한다.</u></p>

<p>변수를 선언하면 가장 먼저 메모리가 확보되는데 <strong><u>자바스크립트 엔진에 의해 `undefined` 라는 값이 암묵적으로 할당되어 초기화된다.</u></strong></p>

<table>
  <tbody>
    <tr>
      <td><strong>자바스크립트 엔진의 변수 선언 2단계</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>선언단계</td>
      <td>변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알림</td>
    </tr>
    <tr>
      <td>초기화 단계</td>
      <td>값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 <code class="language-plaintext highlighter-rouge">undefined</code>를 할당해 초기화</td>
    </tr>
  </tbody>
</table>

<p class="notice--info"><strong>* 실행 컨텍스트</strong><br />
- 모든 변수 이름(식별자)는 실행 컨텍스트에 등록된다.<br />
- 실행 컨텍스트는 엔진이 소스코드를 평가하고 실행하기 위한 환경을 제공 및 실행 결과를 관리하는 영역.<br />
- 자바스크립트는 실행 컨텍스트를 통해 <u>식별자</u>와 <u>스코프</u>를 관리한다.</p>

<p><br /></p>

<h1 id="4-호이스팅">4. 호이스팅</h1>
<hr />

<!-- **변수의 선언시점**   -->
<p>변수의 선언은 위에서 아래로 순차적으로 진행되는 순서를 따르지 않고 그 <u>이전 단계에서 실행</u>이 된다.<br />
자바스크립트 엔진은 코드를 실행하기 앞서 소스코드 평과 과정을 진행한다. 이때 <strong><u>변수 선언 및 모든 선언문(변수, 함수 등)을 먼저 실행한다.</u></strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">consoloe</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jongbin</span><span class="p">);</span>
<span class="c1">// 에러가 발생하지 않음</span>

<span class="kd">var</span> <span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p class="notice--info"><code class="language-plaintext highlighter-rouge">var</code>의 경우 에러가 발생하지 않지만, <code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code>은 에러가 발생</p>

<p><code class="language-plaintext highlighter-rouge">var</code>는 되는데 왜 <code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code>는 안되는지 찾아보니 TDZ(Temporal Dead Zone)라는 개념이 있었다.</p>

<p class="notice--info"><strong>TDZ(Temporal Dead Zone)</strong><br />
변수선언 전에 변수에 접근하면 <strong>TDZ</strong>에 의해 ReferenceError가 발생하게 된다.</p>

<p>블로그를 찾다보니 TDZ 구간에 있는 변수는</p>
<blockquote>
  <p>선언은 되어있지만 아직 초기화가 되지않아 변수에 담길 값을 위한 공간이 메모리에 할당되지 않은 상태</p>
</blockquote>

<p>라고 말하시기도 한다. <u>`const`, `let`도 호이스팅은 되지만 TDZ에 들어있어 참조에러가 난다.</u></p>

<p><del>스코프 내용을 같이 하면 좋겠지만 책 뒤쪽에 나온다.</del><br />
<del>스코프는 간단히 <strong>변수에 접근할 수 있는 범위</strong>라고도 한다.</del></p>

<p><br /></p>

<h1 id="5-값의-할당">5. 값의 할당</h1>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//값의 할당은 선언과 함께 하나의 문으로 할 수 있다.</span>
<span class="kd">const</span> <span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//선언과 할당을 따로 할 수 있다.</span>
<span class="kd">const</span> <span class="nx">jongbin</span><span class="p">;</span>
<span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>변수 할당은 소스코드가 순차적으로 실행되는 런타임에 실행된다.</strong></p>

<p class="notice--info">* 이해하기 어려웠던 부분!<br />
<strong>변수를 선언하면 <code class="language-plaintext highlighter-rouge">undefined</code>라는 값이 할당이 되는데 이후 변수에 할당을 하게되면 해당 변수가 가르키는 메로리주소값에 있는 <code class="language-plaintext highlighter-rouge">undefined</code>값이 수정값으로 수정되는것이 아니고 새로운 메모리에 수정값을 넣고 주소를 바꿔준다.</strong></p>

<p>이렇게 하면 괜히 번거로운게 아닌가 생각을 하는데 왜 값을 직접 변경하지 않는지 모르겠다…(<strong>찾고 추가해서 수정하자!</strong>)</p>

<p><br /></p>

<h1 id="6-값의-재할당">6. 값의 재할당</h1>
<hr />
<p>값의 재할당도 할당과 마찬가지로 직접 값을 수정하지 않고 새로운 메모리를 확보하고 값을 넣고 변수에 주소를 다시 맵핑해준다.</p>

<p><br />
<br /></p>

<p class="notice--info">혹시나 보시다가 고칠 부분이나 마음에 안드시는 부분이 있다면 말씀해주시면 감사하겠습니다!</p>

:ET