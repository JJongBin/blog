I"V"<p><br /></p>

<p class="notice">함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고, 함수 내부에서 선언한 변수는 함수 외부에서는 참조할 수 없고 함수 몸체 내에서만 참조할 수 있다.</p>
<p>왜냐하면 <strong>스코프</strong>가 정해져있기 때문이다</p>

<p><br /></p>

<h1 id="1-스코프">1. 스코프</h1>
<hr />

<p>모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다</p>

<p>➞ 이를 <strong>스코프</strong> 라고 한다 (<u>식별자가 유효한 범위</u>)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// let, const는 중복 선언이 안되기 때문에 var를 사용</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="nx">fuinction</span> <span class="nx">func</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>    <span class="c1">// 10</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>    <span class="c1">// 1</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-스코프의-종류">2. 스코프의 종류</h1>
<hr />
<p>스코프는 “<strong>전역스코프</strong>”, “<strong>지역스코프</strong>” 이렇게 두개로 나뉜다</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">구분</th>
      <th style="text-align: center">설명</th>
      <th style="text-align: center">스코프</th>
      <th style="text-align: center">변수</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">전역</td>
      <td style="text-align: center">코드의 가장 바깥 영역</td>
      <td style="text-align: center">전역 스코프</td>
      <td style="text-align: center">전역 변수</td>
    </tr>
    <tr>
      <td style="text-align: center">지역</td>
      <td style="text-align: center">함수 몸체 내부</td>
      <td style="text-align: center">지역 스코프</td>
      <td style="text-align: center">지역 변수</td>
    </tr>
  </tbody>
</table>

<p><img src="https://blog.kakaocdn.net/dn/okSvC/btq9AjLxXcg/yLqKkFWqxJkUEBLePywxW0/img.png" alt="scope" /></p>
<blockquote>
  <p>출처 <a>https://frontj.com/entry/5-Javascript%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84</a></p>
</blockquote>

<p>위 그림을 보면 <strong>전역 스코프</strong>는 함수를 포함한 그 밖의 영역 제일 바깥쪽이다</p>

<p>그리고 지역 스코프는 <code class="language-plaintext highlighter-rouge">foo()</code>함수의 내부에 1개, <code class="language-plaintext highlighter-rouge">bar()</code>함수의 내부에 1개, 총 2개가 있다</p>

<ul>
  <li>지역은 <u>함수 몸체 내부</u>를 뜻하고 지역변수는 자신의 지역 스코프와 하위의 지역 스코프에서도 유효하다</li>
  <li>전역 스코프는 어디에서나 유효하다(최상단에 있기 때문)</li>
</ul>

<p><br /></p>

<h1 id="3-스코프-체인">3. 스코프 체인</h1>

<p>함수는 중첩될 수 있으므로(각각 함수 내부의 함수는 중첩함수, 외부는 외부함수) <u>스코프도 중첩된다</u></p>

<p>➞ <strong>스코프가 함수의 중첩에 의해 계층적 구조를 가짐</strong></p>

<p>지역 스코프의 상위 스코프는 함수기준 외부 함수의 스코프이다. 계층적으로 연결된 것을 <strong>스코프 체인</strong>이라고 한다</p>

<p><br /></p>

<p><strong><em><u>변수를 참조할때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다</u></em></strong></p>

<p>하위 스코프에서 유효한 변수를 상위스코프에서 참조할 수 없다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// let, const는 중복 선언이 안되기 때문에 var를 사용</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">fuinction</span> <span class="nx">func</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">inner</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>    <span class="c1">// 내부</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>    <span class="c1">// 외부</span>
</code></pre></div></div>
<p>즉 내부에서 <code class="language-plaintext highlighter-rouge">x</code>를 호출했을 때 내부의 변수 <code class="language-plaintext highlighter-rouge">x</code>가 참조되지 외부의 <code class="language-plaintext highlighter-rouge">x</code>(global)이 참조될 수 없다는 뜻이다</p>

<p class="notice"><strong>렉시컬 환경</strong><br />
스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결한 것이다<br />
변수 선언 -&gt; 렉시컬환경에 키 등록<br />
변수 할당 -&gt; 해당하는 값 변경</p>

<p><br /></p>

<h1 id="4-함수-레벨-스코프">4. 함수 레벨 스코프</h1>
<p><code class="language-plaintext highlighter-rouge">var</code> 키워드로 선언된 변수는 <strong>코드블럭이 아닌 <u>함수에 의해서만</u> 지역 스코프가 생성됨</strong></p>

<p class="notice"><code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code> 키워드로 선언된 변수는 블록 레벨 스코프를 지원한다</p>

<p><br /></p>

<h1 id="5-렉시컬-스코프">5. 렉시컬 스코프</h1>

<p>상위 스코프를 결정하는 패턴은 두가지가 있다</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">스코프</th>
      <th style="text-align: left">방법</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">동적 스코프</td>
      <td style="text-align: left">함수를 어디서 호출했는지에 따라 함수의 상위 스코프를 결정</td>
    </tr>
    <tr>
      <td style="text-align: center">렉시컬 스코프</td>
      <td style="text-align: left">함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정</td>
    </tr>
  </tbody>
</table>

<p>자바스크립트는 <strong>렉시컬 스코프</strong>를 따른다.</p>

<p><u>따라서 어디서 정의했는지에 따라 상위스코프를 결정</u></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">func1</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">inner</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">funt2</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">func2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p><br />
<br /></p>

<p class="notice--info">이웅모 선생님의 모던 자바스크립트 Deep Dive를 공부하기 위해 정리한 글입니다.<br />
혹시나 보시다가 고칠 부분이나 마음에 안드시는 부분이 있다면 말씀해주시면 감사하겠습니다!</p>

:ET