I"t!<p><br /></p>

<h1 id="1-값">1. 값</h1>
<hr />

<ul>
  <li><u>값은 식(표현식)이 평가되어 생성된 결과를 말한다.</u></li>
  <li>값은 데이터 타입을 가지고, 메모리에 저장된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 10 + 20이 평가되어 값 30을 생성</span>
<span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 30</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-리터럴">2. 리터럴</h1>
<hr />

<ul>
  <li><u>리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법.</u></li>
  <li>자바스크립트 엔진은 코드를 실행하는 런타임에 리터럴을 평가해 값을 생성함.</li>
</ul>

<p class="notice--info"><strong>* 리터럴</strong><br />
정수리터럴, 부동소수점리터럴, 2진수리터럴, 문자열리터럴, 불리언리터럴, null리터럴, undefined리터럴, 객체리터럴, 배열리터럴, 함수리터럴, 정규표현식리터럴</p>

<h1 id="3-변수-선언">3. 변수 선언</h1>
<hr />

<p>값을 저장하기 위한 메모리 공간을 확보 → 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있도록 함.</p>

<p><u>자바스크립트에서는 변수를 선언할 때 `var`, `let`, `const` 를 사용한다.</u></p>

<p>변수를 선언하면 가장 먼저 메모리가 확보되는데 <strong><u>자바스크립트 엔진에 의해 `undefined` 라는 값이 암묵적으로 할당되어 초기화된다.</u></strong></p>

<table>
  <tbody>
    <tr>
      <td><strong>자바스크립트 엔진의 변수 선언 2단계</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>선언단계</td>
      <td>변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알림</td>
    </tr>
    <tr>
      <td>초기화 단계</td>
      <td>값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 <code class="language-plaintext highlighter-rouge">undefined</code>를 할당해 초기화</td>
    </tr>
  </tbody>
</table>

<p class="notice--info"><strong>* 실행 컨텍스트</strong><br />
- 모든 변수 이름(식별자)는 실행 컨텍스트에 등록된다.<br />
- 실행 컨텍스트는 엔진이 소스코드를 평가하고 실행하기 위한 환경을 제공 및 실행 결과를 관리하는 영역.<br />
- 자바스크립트는 실행 컨텍스트를 통해 <u>식별자</u>와 <u>스코프</u>를 관리한다.</p>

<p><br /></p>

<h1 id="4-호이스팅">4. 호이스팅</h1>
<hr />

<!-- **변수의 선언시점**   -->
<p>변수의 선언은 위에서 아래로 순차적으로 진행되는 순서를 따르지 않고 그 <u>이전 단계에서 실행</u>이 된다.<br />
자바스크립트 엔진은 코드를 실행하기 앞서 소스코드 평과 과정을 진행한다. 이때 <strong><u>변수 선언 및 모든 선언문(변수, 함수 등)을 먼저 실행한다.</u></strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">consoloe</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jongbin</span><span class="p">);</span>
<span class="c1">// 에러가 발생하지 않음</span>

<span class="kd">var</span> <span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p class="notice--info"><code class="language-plaintext highlighter-rouge">var</code>의 경우 에러가 발생하지 않지만, <code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code>은 에러가 발생</p>

<p><code class="language-plaintext highlighter-rouge">var</code>는 되는데 왜 <code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code>는 안되는지 찾아보니 TDZ(Temporal Dead Zone)라는 개념이 있었다.</p>

<p class="notice--info"><strong>TDZ(Temporal Dead Zone)</strong><br />
변수선언 전에 변수에 접근하면 <strong>TDZ</strong>에 의해 ReferenceError가 발생하게 된다.</p>

<p>블로그를 찾다보니 TDZ 구간에 있는 변수는</p>
<blockquote>
  <p>선언은 되어있지만 아직 초기화가 되지않아 변수에 담길 값을 위한 공간이 메모리에 할당되지 않은 상태</p>
</blockquote>

<p>라고 말하시기도 한다. <u>`const`, `let`도 호이스팅은 되지만 TDZ에 들어있어 참조에러가 난다.</u></p>

<p><del>스코프 내용을 같이 하면 좋겠지만 책 뒤쪽에 나온다.</del><br />
<del>스코프는 간단히 <strong>변수에 접근할 수 있는 범위</strong>라고도 한다.</del></p>

<p><br /></p>

<h1 id="5-값의-할당">5. 값의 할당</h1>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//값의 할당은 선언과 함께 하나의 문으로 할 수 있다.</span>
<span class="kd">const</span> <span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//선언과 할당을 따로 할 수 있다.</span>
<span class="kd">const</span> <span class="nx">jongbin</span><span class="p">;</span>
<span class="nx">jongbin</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>변수 할당은 소스코드가 순차적으로 실행되는 런타임에 실행된다.</strong></p>

<p class="notice--info">* 이해하기 어려웠던 부분!<br />
<strong>변수를 선언하면 <code class="language-plaintext highlighter-rouge">undefined</code>라는 값이 할당이 되는데 이후 변수에 할당을 하게되면 해당 변수가 가르키는 메로리주소값에 있는 <code class="language-plaintext highlighter-rouge">undefined</code>값이 수정값으로 수정되는것이 아니고 새로운 메모리에 수정값을 넣고 주소를 바꿔준다.</strong></p>

<p>이렇게 하면 괜히 번거로운게 아닌가 생각을 하는데 왜 값을 직접 변경하지 않는지 모르겠다…(<strong>찾고 추가해서 수정하자!</strong>)</p>

<p><br /></p>

<h1 id="6-값의-재할당">6. 값의 재할당</h1>
<hr />
<p>값의 재할당도 할당과 마찬가지로 직접 값을 수정하지 않고 새로운 메모리를 확보하고 값을 넣고 변수에 주소를 다시 맵핑해준다.</p>

<p>이렇게 되면 <code class="language-plaintext highlighter-rouge">undefined</code>값이나 전에 값들이 메모리에 남아있을텐데 이게 메모리 누수로 이어지지는 않을까 생각했지만!<br />
이렇게 <u>불필요한 값들은 **가비지 콜렉터**에 의해 메모리에서 자동 해제된다!</u></p>

<p><br /></p>

<h1 id="7-식별자-네이밍-규칙">7. 식별자 네이밍 규칙</h1>
<hr />

<ul>
  <li>식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.</li>
  <li>식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작해야 한다. (숫자로 시작 X)</li>
  <li>예약어는 식별자로 사용할 수 없다.</li>
</ul>

<p>변수 이름은 목적을 위해 의미를 명확히 표현하는게 좋다.</p>

<p><br /></p>

<h1 id="-네이밍-컨벤션">#. 네이밍 컨벤션</h1>
<hr />
<ul>
  <li>카멜 케이스 (jongbinHome)</li>
  <li>스네이크 케이스 (jongbin_home)</li>
  <li>파스칼 케이스 (JongbinHome)</li>
  <li>헝가리언 케이스 (strJongbinHome) → (type + 식별자이름)</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>자바스크립트에서는 일반적으로</td>
      <td> </td>
    </tr>
    <tr>
      <td>변수, 함수</td>
      <td><strong>카멜케이스</strong></td>
    </tr>
    <tr>
      <td>생성자 함수, 클래스</td>
      <td><strong>파스칼케이스</strong></td>
    </tr>
  </tbody>
</table>

<p><br />
<br /></p>

<p class="notice--info">혹시나 보시다가 고칠 부분이나 마음에 안드시는 부분이 있다면 말씀해주시면 감사하겠습니다!</p>

:ET